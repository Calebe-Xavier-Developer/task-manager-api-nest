generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String               @id @default(uuid())
  name         String
  email        String               @unique
  password     String
  phone        String
  is2FAEnabled Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  board        Board[]
  columns      Column[]
  resetTokens  PasswordResetToken[]
  tasks        Task[]
  twoFATokens  TwoFAToken[]
}

model TwoFAToken {
  id        String   @id @default(uuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id           String        @id @default(uuid())
  name         String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  boardColumns BoardColumn[]
}

model BoardColumn {
  id       String @id @default(uuid())
  boardId  String
  columnId String
  position Int
  board    Board  @relation(fields: [boardId], references: [id])
  column   Column @relation(fields: [columnId], references: [id])

  @@unique([boardId, columnId])
}

model Column {
  id           String        @id @default(uuid())
  title        String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  boardColumns BoardColumn[]
  user         User          @relation(fields: [userId], references: [id])
  columnTask   ColumnTask[]
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  priority    Priority     @default(medium)
  status      Status       @default(todo)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  columnTask  ColumnTask[]
  user        User         @relation(fields: [userId], references: [id])
}

model ColumnTask {
  id       String @id @default(uuid())
  columnId String
  taskId   String
  position Int
  column   Column @relation(fields: [columnId], references: [id])
  task     Task   @relation(fields: [taskId], references: [id])

  @@unique([columnId, taskId])
}

enum Priority {
  low
  medium
  high
}

enum Status {
  todo
  in_progress
  done
}
